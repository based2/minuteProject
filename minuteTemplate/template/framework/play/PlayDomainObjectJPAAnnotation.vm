#exposeVariableEntitySpecific()
#exposeEnvironmentParams()
#putPlayTemplateDefinition()
#putImportParamsUML()
#set($attributecount=$attributes.length)
package $packageName;

import java.util.*;

import java.sql.*;
import java.util.Date;
import play.db.jpa.*;
import play.data.validation.*;
import play.templates.*;
import play.mvc.Scope.*;

import javax.persistence.*;

##printPlayDomainImport()
#exposeJPA2Import()
#exposeJPA2CompositeKeyImport()
#exposeJPA2EnumImport()

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: Play Domain Object describing a ${className} entity</p>
 *
 */
@Entity (name="${className}")
@Table (name="${table.name}")
public class ${className} extends GenericModel {

#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
    @EmbeddedId
    private ${embeddedIdClass} $embeddedIdVariable;
    
#else
#foreach($column in ${table.primaryKeyColumns})
#putColumnParams()
#columnJavaNaming()
#if (!$isMany2Many)
#if (!$isPkUserProvided)
##    @Column(name="$column.name" #if($isLengthPrecisionColumn),length=$column.size#end)
#if ($databaseUtils.isPrimaryKeyPolicySequence($table))
#set ($sequenceName = $databaseUtils.provideSequence($table))
    @SequenceGenerator(name = "${table.name}SEQ", sequenceName ="$sequenceName", allocationSize=1 )
#end
#end
    @Id @Column(name="$column.name" #if($isLengthPrecisionColumn),length=$column.size#end)
#if (!$isMany2Many)
#if (!$isPkUserProvided)
#if ($databaseUtils.isPrimaryKeyPolicySequence($table))
#set ($sequenceName = $databaseUtils.provideSequence($table))
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator="${table.name}SEQ") 
#elseif ($databaseUtils.isPrimaryKeyPolicyIncrement($table))
    @GeneratedValue(strategy = GenerationType.AUTO)
#end
#end
#end
#end
    private $columnType $columnVar;

#end
#end
#foreach ($column in ${table.attributes})
#putColumnParams()
#columnJavaNaming()
#if($isEnum)
#set($columnType=$enumClassName)
    @Enumerated #if($convertUtils.isStringType($column.type))(EnumType.STRING)#end
    
#else
#if ($isView)
    @Column(name="$column.name",  #if($isLengthPrecisionColumn)length=$column.size,#end #if($column.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true,#else unique=false,#end insertable=false, updatable=false)
#else
    @Column(name="$column.name",  #if($isLengthPrecisionColumn)length=$column.size,#end #if($column.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true#else unique=false#end)
#end
#if ($isMandatory)
    @Required
#end
#if ($column.isLob())
#set($columnType="java.sql.$columnType")
    @Lob
#exposeLobProperties()
#end
#if ($playUtils.hasStereotype($column))
    @$playUtils.getStereotype($column)
#end
#end
    private $columnType $columnVar; 
    
#end
#foreach ($reference in $table.parents)
#if ($referenceUtils.isReferenceInPrimaryKey($reference) && $tableUtils.isCompositePrimaryKeyNotMany2Many($table))
    @MapsId ("$localColumnName")
#end
#putReferenceParams2()
    @ManyToOne (fetch=FetchType.LAZY)
#if ($isView)
    @JoinColumn(name="$localColumnName", #if($localColumn.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true,#else unique=false,#end insertable=false, updatable=false)
#else
#if(!$isMany2Many)
#exposeJPAFKisPKAnnotation()
    @JoinColumn(name="$localColumnName", #if($localColumn.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true,#else unique=false#end $insertableUpdatable )
#else
    @JoinColumn(name="$localColumnName", #if($localColumn.isRequired())nullable=false#else nullable=true#end, #if($isColumnUnique)unique=true,#else unique=false,#end insertable=false, updatable=false)
#end
#end  
#if ($isMandatory && !$table.isLinkEntity())
    @Required
#end 
#exposeEnrichedPk($localColumn)
#if (!$isEnrichedPk)
#set($colVar = ${localColumnVariable})
#else
#set($colVar = ${linkedTableVariable})
#end
    private $linkedTableClass ${colVar}; 
    
#end
#foreach ($reference in $table.children)
#putReferenceParams2()
#if(!$linktableDB.isManyToMany())
#set ($importDomainObjectForeignTable = $commonUtils.getEntityLevelTemplateFullPath($model, $linktableDB, $template, $templateJPA2DomainObject))
#set ($targetEntityClass="${importDomainObjectForeignTable}.class")
#exposeEnrichedPk(${reference.column})
#if (!$isEnrichedPk)
#set ($foreignColumnVar = $formatUtils.getJavaNameVariable($columnDB.name))
#else
#set ($foreignColumnVar = $domainVariableName)
#end
    @OneToMany (targetEntity=$targetEntityClass, fetch=FetchType.LAZY, mappedBy="$linkedColumnVariable"#if (!$reference.column.isRequired() || $reference.table.isLinkEntity()), cascade=CascadeType.REMOVE#end)//, cascade=CascadeType.ALL)
    private Set <$linkedTableClass> $childrenListVariable = new HashSet<$linkedTableClass>(); 
   
#end
#end
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
#exposeImportParamsUML($targetTable)
#set($targetColumn=$enrichmentUtils.getOtherColumn($linkedTableDB, $linkReference.localColumn))
    @ManyToMany
    @JoinTable(name="$linkedTableDBName", 
        joinColumns=@JoinColumn(name="$targetColumn.name"), 
        inverseJoinColumns=@JoinColumn(name="$linkReference.localColumnName") 
    )
    private Set <$targetTableName> $childrenListVariable = new HashSet <$targetTableName> ();

#end
    /**
    * Default constructor
    */
    public ${className}() {
    }

#if ($isMany2Many)
    public ${className} get${className} () {
    	return this;
    }

    public void set${className} (${className} ${variableName}) {
    	new ${className}(
#foreach ($column in ${table.columns})
#putColumnParams()
       ${variableName}.get_${columnVar}()#if ($velocityCount!=$table.columnCount),
#end
#end 		
		);
    }
#end    

#if ($tableUtils.isCompositePrimaryKeyNotMany2Many($table))
    public $embeddedIdClass get$embeddedIdClass() {
        return $embeddedIdVariable;
    }
	
    public void set$embeddedIdClass ($embeddedIdClass $embeddedIdVariable) {
        this.$embeddedIdVariable =  $embeddedIdVariable;
    }
    
#else 
#foreach($column in ${table.primaryKeyColumns})
#putColumnParams()
#columnJavaNaming()
    public $columnType get$columnClass() {
        return $columnVar;
    }
	
    public void set$columnClass ($columnType $columnVar) {
        this.$columnVar =  $columnVar;
    }
    
#end
#end
#foreach ($column in ${table.attributes})
#putColumnParams()
#columnJavaNaming()
#if ($column.isLob())
#set($columnType="java.sql.$columnType")
#exposeLobProperties()
##if ($convertClobToString=="true")
##set($columnType="String")
##end
#end
#if($isEnum)
#set($columnType=$enumClassName)
#end
    public $columnType get$columnClass() {
        return $columnVar;
    }
	
    public void set$columnClass ($columnType $columnVar) {
        this.$columnVar =  $columnVar;
    }
    
#end
#foreach ($reference in $table.parents)
#putReferenceParams2()
#exposeEnrichedPk($localColumn)
#if (!$isEnrichedPk)
    public $linkedTableClass get$localColumnClass () {
    	return ${localColumnVariable};
    }
	
    public void set${localColumnClass} ($linkedTableClass ${localColumnVariable}) {
    	this.${localColumnVariable} = ${localColumnVariable};
    }
    
#else
    public $linkedTableClass get${linkedTableClass} () { 
    	return ${linkedTableVariable};
    }
	
   public void set${linkedTableClass} ($linkedTableClass ${linkedTableVariable}) {
    	this.${linkedTableVariable} = ${linkedTableVariable};
    }
    
#end 
#end
#foreach ($reference in $table.children)
#putReferenceParams2()
#if(!$linktableDB.isManyToMany())
    public Set<$linkedTableClass> get${childrenListClass}() {
        if (${childrenListVariable} == null){
            ${childrenListVariable} = new HashSet<$linkedTableClass>();
        }
        return ${childrenListVariable};
    }

    public void set${childrenListClass} (Set<$linkedTableClass> ${childrenListVariable}) {
        this.${childrenListVariable} = ${childrenListVariable};
    }	
    
    public void add${childrenListClass} ($linkedTableClass ${linkedTableVariable}) {
    	    get${childrenListClass}().add($linkedTableVariable);
    }
    
#end    
#end
#foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
#exposeM2MSpecific()
    public Set<$targetTableName> get${childrenListClass}() {
        if (${childrenListVariable} == null){
            ${childrenListVariable} = new HashSet<$targetTableName>();
        }
        return ${childrenListVariable};
    }

    public void set${childrenListClass} (Set<$targetTableName> ${childrenListVariable}) {
        this.${childrenListVariable} = ${childrenListVariable};
    }
    	
    public void add${childrenListClass} ($targetTableName ${childrenListVariable}) {
        get${childrenListClass}().add($childrenListVariable);
    }	    
#end
    public String toString(){
       return $playUtils.getToString($table, $embeddedIdVariable);
    }
}
