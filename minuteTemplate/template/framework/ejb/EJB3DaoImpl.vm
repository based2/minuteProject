#exposeEJBDomainObjectSpecific()
#exposeJPASpecifics()
#exposeEJBProperties()
#addedAreas()
package $packageName;

$!updatedAreaImport
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

import javax.annotation.Resource;
import javax.ejb.Stateful;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceContextType;
import javax.transaction.UserTransaction;

import $importDomainObjectUML;
#if($implementInterface)
import $EJBDaoRemoteInterfaceImport;
#end
/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: remote interface for ${className} service </p>
 *
 */

@Stateless ##(name="$EJBDaoImplVariable") 
public class ${className} #if($implementInterface)implements $EJBDaoRemoteInterfaceClass#end {
 
	@PersistenceContext(unitName = "$persistenceUnitName")
	private EntityManager em;

	public List<$tableClassName> findAll ($tableClassName $tableVariableName) {
		Query query = em.createQuery("select $tableVariableName from $tableClassName $tableVariableName");
		return query.getResultList();
	}

	public List<$tableClassName> findAll () {
		Query query = em.createQuery("select $tableVariableName from $tableClassName $tableVariableName");
		return query.getResultList();
	}
	
#if ($hasOnlyOnePrimaryKey)	
    public $tableClassName findById ($primaryKeyFullType $primaryKeyVariable) {
        return em.find (${tableClassName}.class, $primaryKeyVariable);
    }

    public $tableClassName find ($primaryKeyFullType $primaryKeyVariable) {
		Query query = em.createQuery("select $tableVariableName from $tableClassName $tableVariableName where ${tableVariableName}.$primaryKeyVariable = :$primaryKeyVariable");
		query.setParameter("$primaryKeyVariable", $primaryKeyVariable);
		List list = query.getResultList(); 
		if (list!=null && !list.isEmpty()) {
			$tableClassName var = ($tableClassName)list.get(0);  
			return var.flat();
		}
		return new $tableClassName();		
    }	

	public void delete ($tableClassName $tableVariableName) {
		if (${tableVariableName}.get${primaryKeyJavaNameClass}()!=null)
			em.remove (findById(${tableVariableName}.get${primaryKeyJavaNameClass}()));
	}

#end
#if ($hasSemanticReference)
	public $tableClassName findBySemanticReference ($primaryKeyFullType $primaryKeyVariable) {
		return em.find (${tableClassName}.class, $primaryKeyVariable);
		}

#end
	public $tableClassName create ($tableClassName $tableVariableName) {
		em.persist (${tableVariableName});
		return $tableVariableName;
	}
	
	public $tableClassName update ($tableClassName $tableVariableName) {
		em.merge (${tableVariableName});
		return $tableVariableName;
	}
	

$!updatedAreaImplementation
}