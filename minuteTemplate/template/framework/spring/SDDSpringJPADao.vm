#exposeQuerySpecific()
#exposeSDDSpring()
#putImportQuerySDDBean()
#addedAreas()
#exposeJPASpecifics()
package $packageName;

$!updatedAreaImport

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.hibernate.HibernateException;
import org.hibernate.Session;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import $sddOutputBeanCollectionImport;
import $sddOutputBeanImport;
import $sddDaoInterfaceImport;
#if($isNotVoidInput)
import $sddInputBeanImport;
#end
/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: SDD DAO Spring JPA implementation </p>
 *
 */
@Repository ("$sddDaoInterfaceVariable")
@Transactional(propagation = Propagation.REQUIRED) 
public class ${className} implements $sddDaoInterfaceClass{

#set ($fullQuery = $queryUtils.getFullQueryQuestionMark($query))
	public static final String QUERY_NATIVE = "$fullQuery";

	@PersistenceContext(unitName = "$persistenceUnitName")  
    EntityManager entityManager;  
#exposeQueryUpdatedAreas("SDD_EXECUTE_GET")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    public $sddOutputBeanCollectionClass execute (#if($isNotVoidInput)$sddInputBeanClass $sddInputBeanVariable#end) {
		$sddOutputBeanCollectionClass $sddOutputBeanCollectionVariable = new $sddOutputBeanCollectionClass();
		List<$sddOutputBeanClass> list = executeJDBC (#if($isNotVoidInput)$sddInputBeanVariable#end);
		${sddOutputBeanCollectionVariable}.set$sddOutputBeanClasses (list);
        return ${sddOutputBeanCollectionVariable};
    }
#end
$!updatedAreaEnd

#exposeQueryUpdatedAreas("SDD_EXECUTE_JDBC")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
	public List<$sddOutputBeanClass> executeJDBC(#if($isNotVoidInput)$sddInputBeanClass $sddInputBeanVariable#end) {
		List<$sddOutputBeanClass> list = new ArrayList<$sddOutputBeanClass>();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Connection conn = null;
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(QUERY_NATIVE);
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
#set($columnType = $statementUtils.getJdbcType($column))
			pstmt.set$columnType($velocityCount, ${sddInputBeanVariable}.get$columnClass()); 
#end			
			rs = pstmt.executeQuery();
			while (rs.next()) {
				$sddOutputBeanClass $sddOutputBeanVariable = new $sddOutputBeanClass();
#foreach($column in $outputBean.columns)
#putColumnParamNaming()
#set($columnType = $statementUtils.getJdbcType($column))
				${sddOutputBeanVariable}.set$columnClass(rs.get${columnType}($velocityCount)); 
#end
				list.add(${sddOutputBeanVariable});
	        }
		} catch (Exception e) {
		      e.printStackTrace();
	    } finally {
	      try {
	        rs.close();
	        pstmt.close();
	        conn.close();
	      } catch (Exception e) {
	        e.printStackTrace();
	      }
	    }
		return list;
	}
#end
$!updatedAreaEnd

//if JPA2 implementation is hibernate
	@SuppressWarnings("deprecation")   
   	public Connection getConnection() throws HibernateException {  
		Session session = getSession();  
		Connection connection = session.connection();  
		return connection;  
   	} 
	
   	private Session getSession() {  
   		Session session = (Session) entityManager.getDelegate();  
   		return session;  
   	}
	
$!updatedAreaImplementation

}