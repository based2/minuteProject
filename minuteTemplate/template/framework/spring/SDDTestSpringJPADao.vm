#exposeQuerySpecific()
#exposeSDDSpring()
#putImportQuerySDDBean()
#addedAreas()
#exposeJPASpecifics()
package $packageName;

$!updatedAreaImport

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.hibernate.HibernateException;
import org.hibernate.Session;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import $sddOutputBeanCollectionImport;
import $sddOutputBeanImport;
import $sddInputBeanImport;
import $sddDaoInterfaceImport;

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: Test SDD DAO Spring JPA implementation </p>
 *
 */
@Repository ("$sddDaoInterfaceVariable")
@Transactional(propagation = Propagation.REQUIRED) 
public class ${className} extends $abstractSpringTest{

    @Autowired
    @Qualifier("$sddDaoInterfaceVariable")
    ${sddDaoInterfaceClass} $sddDaoInterfaceVariable;

#exposeQueryUpdatedAreas("SDD_EXECUTE_GET")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else

    @Test
    public void execute (
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
        @RequestParam ("$columnVar") $columnType $columnVar #if($velocityCount!=$inputBean.columnCount),
#end
#end
    ) {
        $sddInputBeanClass $sddInputBeanVariable = new $sddInputBeanClass ();
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
        ${sddInputBeanVariable}.set$columnClass ($columnVar);
#end
        return ${sddDaoInterfaceVariable}.execute(${sddInputBeanVariable});
    }
#end
$!updatedAreaEnd

$!updatedAreaImplementation

}