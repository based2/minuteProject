#exposeColumnSpecific()
package $packageName;

import java.util.ArrayList;
import java.util.List;

public enum $className {

#if($columnUtils.hasCheckConstraint($column))
#set($property=$columnUtils.getCheckConstraintProperty($column))
#set($propertyList=$property.getPropertiesArray())
#foreach ($prop in $propertyList)
#exposeEnumerationSpecific()
    $enumName("$enumValue")#if( $velocityHasNext ),
##set($propName=$restrictedCodeUtils.convertToValidJavaWithUpperCase($prop.name))
##    $propName("$prop.name")#if( $velocityHasNext ),
#end
#end
#end
;

    private final String value;

    ${className}(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ${className} fromValue(String v) {
        for (${className} c : ${className}.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        return null;
    }

    /**
    * Return a list that contains all the enumeration values      
    * @return List<$className> the that contains all the enumeration values  
    */     
    public static List<$className> getList() {
	    List<$className> list = new ArrayList<$className>();
	    for ($className c : ${className}.values()) {
		   list.add(c);
	 	}
	    return list;
    }

    /**
    * @param value 
    * @return boolean : true if the value exist in the enum
    */
    public static boolean contains (String value) {
       for ($className c : ${className}.values()) {
          if (c.toString().equals(value))
             return true;
          }    	 
       return false;
    }     

    public static boolean containsValue (String value) {
        for ($className c : ${className}.values()) {
           if (c.value().equals(value))
              return true;
           }    	 
        return false;
    }

    public boolean equals (String s) {
    	if (s==null) return false;
    	return s.equals(value);
    }   	     

}