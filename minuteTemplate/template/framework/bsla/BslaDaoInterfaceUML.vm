#exposeVariableEntitySpecific()
#putImportParamsUML()
package $packageName;

import $importDomainObjectUML;
import java.util.List;
import net.sf.minuteProject.architecture.bsla.bean.criteria.PaginationCriteria;
import net.sf.minuteProject.architecture.bsla.dao.face.DataAccessObject;

/**
 *
 * <p>Title: $className</p>
 *
 * <p>Description: Interface of a Data access object dealing with $className
 * persistence. It offers a set of methods which allow for saving,
 * deleting and searching $tableVariableName objects</p>
 *
 */
public interface $className extends DataAccessObject {

    /**
     * Inserts a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void insert$tableClassName($tableClassName $tableVariableName) ;
 
    /**
     * Inserts a list of $tableClassName entity 
     * @param List<$tableClassName> ${tableVariableName}s
     */
    public void insert${tableClassName}s(List<$tableClassName> ${tableVariableName}s) ;
        
    /**
     * Updates a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public $tableClassName update$tableClassName($tableClassName $tableVariableName) ;

	 /**
     * Updates a $tableClassName entity with only the attributes set into $tableClassName.
	 * The primary keys are to be set for this method to operate.
	 * This is a performance friendly feature, which remove the udibiquous full load and full update when an
	 * update is to be done
   * Remark: The primary keys cannot be update by this methods, nor are the attributes that must be set to null.
   * @param $tableClassName $tableVariableName
   */
    public int updateNotNullOnly$tableClassName($tableClassName $tableVariableName) ;
	 
	public int updateNotNullOnlyPrototype${tableClassName}($tableClassName $tableVariableName, $tableClassName prototypeCriteria);
	
     /**
     * Saves a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void save$tableClassName($tableClassName $tableVariableName);
    
    /**
     * Deletes a $tableClassName entity 
     * @param $tableClassName $tableVariableName
     */
    public void delete$tableClassName($tableClassName $tableVariableName) ;
 
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName
     * @param Long id
     * @return $tableClassName The $tableClassName entity
     
    public $tableClassName load$tableClassName(Long id);
*/
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName
#if($isMany2Many)
     * @param $tableClassName ${tableVariableName}
#else     
     * @param $primaryKeyFullType $primaryKey
#end
     * @return $tableClassName The $tableClassName entity
     */
#if($isMany2Many)
    public $tableClassName load$tableClassName($tableClassName ${tableVariableName});
#else      
    public $tableClassName load$tableClassName($primaryKeyFullType $primaryKeyVariable);    
#end

    /**
     * Loads a list of $tableClassName entity 
     * @param List<$primaryKeyFullType> ${primaryKeyVariable}s
     * @return List<$tableClassName> The $tableClassName entity
     */
    public List<$tableClassName> load${tableClassName}ListBy${tableClassName} (List<$tableClassName> ${tableVariableName}s);
    
    /**
     * Loads a list of $tableClassName entity 
     * @param List<$primaryKeyFullType> ${primaryKeyVariable}s
     * @return List<$tableClassName> The $tableClassName entity
     */
    public List<$tableClassName> load${tableClassName}ListBy${primaryKeyJavaNameClass}(List<$primaryKeyFullType> ${primaryKeyVariable}s);
    
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName and its dependent one to many objects
     * @param Long id
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName loadFullFirstLevel$tableClassName($primaryKeyFullType $primaryKeyVariable);
    
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName
     * @param $tableClassName $tableVariableName
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName loadFullFirstLevel$tableClassName($tableClassName $tableVariableName);    
    
    
    /**
     * Loads the $tableClassName entity which is related to an instance of
     * $tableClassName and its dependent objects one to many
     * @param Long id
     * @return $tableClassName The $tableClassName entity
     */
    public $tableClassName loadFull$tableClassName(Long id) ;

    /**
     * Searches a list of $tableClassName entity based on a $tableClassName containing $tableClassName matching criteria
     * @param $tableClassName $tableVariableName
     * @return List<$tableClassName>
     */
    public List<$tableClassName> searchPrototype$tableClassName($tableClassName $tableVariableName) ;
    
    /**
     * Searches a list of $tableClassName entity based on a list of $tableClassName containing $tableClassName matching criteria
     * @param List<$tableClassName> ${tableVariableName}s
     * @return List<$tableClassName>
     */
    public List<$tableClassName> searchPrototype$tableClassName(List<$tableClassName> ${tableVariableName}s) ;    
    	
	/**
     * Searches a list of $tableClassName entity 
     * @param $tableClassName $tableVariableName
     * @return List
     */
    public List<$tableClassName> searchPrototype$tableClassName($tableClassName ${tableVariableName}Positive, $tableClassName ${tableVariableName}Negative) ;
        
    /**
     * Load a paginated list of $tableClassName entity dependent of pagination criteria
     * @param PaginationCriteria paginationCriteria
     * @return List
     */
    public List<$tableClassName> loadPaginated$tableClassName ($tableClassName $tableVariableName, PaginationCriteria paginationCriteria) ;
            
}
