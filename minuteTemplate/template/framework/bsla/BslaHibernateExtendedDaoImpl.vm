#exposeVariableEntitySpecific()
#putImportParamsUML()
package $packageName;

import java.lang.reflect.InvocationTargetException;
import java.sql.Clob;
import java.sql.Timestamp;
import java.util.Date;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Hashtable;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang.StringUtils;

import org.hibernate.Query;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import net.sf.minuteProject.architecture.cache.SimpleCache;
import net.sf.minuteProject.architecture.filter.data.Criteria;
import net.sf.minuteProject.architecture.filter.data.Criterion;
import net.sf.minuteProject.architecture.filter.data.OrderCriteria;
import net.sf.minuteProject.architecture.utils.BeanUtils;
import $importDaoInterfaceExtendedUML;
import $importDomainObjectUML;
import $importHibernateImplName;

#foreach ($reference in $table.parents)
#set ($importDaoImplExtendedHibernateName = $commonUtils.getEntityLevelTemplateFullPath($model, $reference.foreignTable, $template, "BslaHibernateExtendedDaoImplUML"))
import $importDaoImplExtendedHibernateName;
#end
/**
 *
 * <p>Title: $className</p>
 *
 * <p>Description: Interface of a Data access object dealing with $className
 * persistence. It offers a set of methods which allow for saving,
 * deleting and searching $className objects</p>
 *
 */

public class $className extends $daoHibernateImplClassName implements $daoInterfaceExtendedNameUML {

	public $className () {}

    /**
     * lookup $tableClassName entity $tCN, criteria and max result number
     */
    public List<$tableClassName> lookup$tableClassName($tableClassName $tableVariableName, Criteria criteria, int numberOfResult) {
		boolean isWhereSet = false;
        StringBuffer query = new StringBuffer();
        query.append (" FROM $tableClassName $tableVariableName ");
        for (Criterion criterion : criteria.getClauseCriterions()) {
            query.append (getQueryWHERE_AND (isWhereSet));
            isWhereSet = true;   
            query.append(criterion.getExpression());			
		}
        OrderCriteria orderCriteria = criteria.getOrderCriteria();
        if (criteria.getOrderCriteria()!=null)
        	query.append(orderCriteria.getExpression());		
        Query hquery = getSession().createQuery(query.toString());
        hquery.setMaxResults(numberOfResult);
        return hquery.list();
    }
	
	/**
	 * Assign the first $tableVariableName retrieved corresponding to the $tableVariableName criteria.
	 * Blank criteria are mapped to null.
	 * If no criteria is found, null is returned.
	 * If there is no $tableVariableName corresponding in the database. Then $tableVariableName is inserted and returned with its primary key(s). 
	 */
	public $tableClassName assign$tableClassName ($tableClassName $tableVariableName) {
		$tableVariableName = assignBlankToNull ($tableVariableName);
		if (isAllNull($tableVariableName))
			return null;
		else {
			List<$tableClassName> list = searchPrototype$tableClassName($tableVariableName);
			if (list.isEmpty()) 
				insert$tableClassName($tableVariableName);
			else if (list.size()==1)
				${tableVariableName}.copy(list.get(0));
			else 
				//TODO log error
				${tableVariableName}.copy(list.get(0));
		}
		return $tableVariableName;		
	}
	
	public $tableClassName getFirst$tableClassName ($tableClassName $tableVariableName) {
		if (isAllNull($tableVariableName))
			return null;
		else {
			List<$tableClassName> list = searchPrototype$tableClassName($tableVariableName);
			if (list.isEmpty()) {
				return null;
			}
			else if (list.size()==1)
				return list.get(0);
			else 
				//TODO log error
				return list.get(0);	
		}
	}
    
	private $tableClassName assignBlankToNull ($tableClassName $tableVariableName) {
	    if ($tableVariableName==null)
			return null;
#foreach ($column in ${table.columns})
#putColumnParams()
#if ($columnType=="String")
        if (${tableVariableName}.get$columnClass()!=null && ${tableVariableName}.get$columnClass().equals(""))
           ${tableVariableName}.set$columnClass(null);
#end
#end	
		return ${tableVariableName};
	}
	
	private boolean isAllNull ($tableClassName $tableVariableName) {
	    if ($tableVariableName==null)
			return true;
#foreach ($column in ${table.columns})
#putColumnParams()
        if (${tableVariableName}.get$columnClass()!=null) 
            return false;
#end
		return true;
	}

	private int countPartialField ($tableClassName $tableVariableName) {
	   int cpt = 0;
#foreach ($column in ${table.columns})
#putColumnParams()
       if (${tableVariableName}.get$columnClass() != null) {
          cpt++;
       }
#end 		
       return cpt;
	}   
	
	public List<$tableClassName> partialLoadWithParent$tableClassName($tableClassName ${tableVariableName}What, $tableClassName positive$tableClassName, $tableClassName negative$tableClassName) {
		Map<Integer, String> beanPath = new Hashtable<Integer, String>();
		Query hquery = getSession().createQuery(partialLoadWithParent${tableClassName}Query (${tableVariableName}What, positive$tableClassName, negative$tableClassName, beanPath));
		List<Object[]> list = hquery.list();
		return handlePartialLoadWithParent$tableClassName(list, beanPath, ${tableVariableName}What);
  }	
  
	private List<$tableClassName> handlePartialLoadWithParent$tableClassName(List<Object[]> list, Map<Integer, String> beanPath, $tableClassName ${tableVariableName}What) {
		try {
			return convertPartialLoadWithParent$tableClassName(list, beanPath, ${tableVariableName}What);
		} catch (Exception ex) {
			//TODO log ex
			return new ArrayList<$tableClassName>();
		}
	
    }
	
	private List<$tableClassName> convertPartialLoadWithParent$tableClassName(List<Object[]> list, Map<Integer, String> beanPath, $tableClassName ${tableVariableName}What) throws IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {
		List<$tableClassName> resultList = new ArrayList<$tableClassName>();
		//$tableClassName ${tableVariableName}Prototype = clone$tableClassName (${tableVariableName}What);
		for (Object[] row : list) {		
			$tableClassName ${tableVariableName} = clone$tableClassName (${tableVariableName}What);
			Iterator<Entry<Integer, String>> iter = beanPath.entrySet().iterator();	
			while (iter.hasNext()) {
				Entry entry = iter.next();
				populate$tableClassName (${tableVariableName}, row[(Integer)entry.getKey()], (String)entry.getValue());
			}
			resultList.add(${tableVariableName});
		}
		return resultList;		
    }	
	
	private void populate$tableClassName ($tableClassName ${tableVariableName}, Object value, String beanPath) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
		BeanUtils.populateBeanObject(${tableVariableName}, beanPath, value);
	}
	
	private $tableClassName clone$tableClassName ($tableClassName ${tableVariableName}) throws IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {
		return ($tableClassName) BeanUtils.cloneBeanObject(${tableVariableName});
	}
    
   /**
	  * 
    * partial on entity and its parents load enables to specify the fields you want to load explicitly
    */
	public String partialLoadWithParent${tableClassName}Query ($tableClassName $tableVariableName, $tableClassName positive$tableClassName, $tableClassName negative$tableClassName, Map beanPath) {
		Hashtable aliasWhatHt = new Hashtable();
		String what = getPartialLoadWithParent${tableClassName}Query ($tableVariableName, null, aliasWhatHt, null, null, beanPath, "");
		Hashtable aliasWhereHt = new Hashtable();
		String where = getPartialLoadWithParentWhere${tableClassName}Query (positive$tableClassName, null, aliasWhatHt, aliasWhereHt, null, null);
		String whereHow = reconciliateWherePath(aliasWhatHt, aliasWhereHt);
		String how = reconciliateHowPath(aliasWhatHt, aliasWhereHt);
		String whereConcat = "";
		if (where!=null && !where.equals("") && whereHow!=null && !whereHow.equals(""))
			whereConcat=" AND ";
		return what+" FROM "+how +" WHERE "+whereHow+ whereConcat +where;
	}
    
	/**
    * partial on a single entity load enables to specify the fields you want to load explicitly
    */         
	public List<$tableClassName> partialLoad$tableClassName($tableClassName $tableVariableName, $tableClassName positive$tableClassName, $tableClassName negative$tableClassName) {
	    Query hquery = getSession().createQuery(getPartialLoad${tableClassName}Query ($tableVariableName, positive$tableClassName, negative$tableClassName));
		int countPartialField = countPartialField($tableVariableName);
		Iterator iter = hquery.iterate();
		List<$tableClassName> returnList = new ArrayList<$tableClassName>();
		while(iter.hasNext()) {
	       int index = 0;
	       Object[] row;
	       if (countPartialField==1) {
	    	  row = new Object[1];
	    	  row[0] = iter.next();
	       } else 
		      row = (Object[]) iter.next();
		   $tableClassName ${tableVariableName}Result = new $tableClassName();
#foreach ($column in ${table.columns})
#putColumnParams()
           if (${tableVariableName}.get$columnClass() != null) {
			  ${tableVariableName}Result.set$columnClass(($columnType) row[index]);
              index++;
           }
#end 		   	
           returnList.add(${tableVariableName}Result);
        }
	    return returnList;
	}

	public static String getPartialLoadWithParentWhere${tableClassName}Query (
	   $tableClassName $tableVariableName, Boolean isWhereSet, Hashtable aliasHt, Hashtable aliasWhereHt, String childAlias, String childFKAlias) {
	   if ($tableVariableName==null)
	      return "";
	   String alias = null;
	   if (aliasWhereHt == null) {
	      aliasWhereHt = new Hashtable();
	   } 
	   if (isLookedUp($tableVariableName)){
	      alias = getNextAlias (aliasWhereHt, ${tableVariableName});
		  aliasWhereHt.put (getAliasKey(alias), getAliasConnection(alias, childAlias, childFKAlias));
	   }
	   if (isWhereSet == null)
          isWhereSet = false;
       StringBuffer query = new StringBuffer();
#foreach ($column in ${table.columns})
#putColumnParams()
       if (${tableVariableName}.get$columnClass() != null) {
           query.append (getQueryBLANK_AND (isWhereSet));
		   isWhereSet = true;
#if ($sqlUtils.isQuotedColumn($column))        
           query.append(" "+alias+".${columnVar} = '"+ ${tableVariableName}.get$columnClass()+"' ");
#else
           query.append(" "+alias+".${columnVar} = "+ ${tableVariableName}.get$columnClass() + " ");
#end		  
       }
#end     
#foreach ($reference in $table.parents)
#putReferenceParams2()
#set ($importDaoImplExtendedHibernateName = $commonUtils.getEntityLevelTemplateFullPath($model, $reference.foreignTable, $template, "BslaHibernateExtendedDaoImplUML"))
#set ($linkedDaoImplExtendedHibernateName = $commonUtils.getTemplateClassName($model, $reference.foreignTable, $template, "BslaHibernateExtendedDaoImplUML"))
##-- var = ${localTableVariable} - ${localColumnClass}
       if (${tableVariableName}.get${linkedTableClass}${localColumnClass}()!=null) {
	      String chunck = ${importDaoImplExtendedHibernateName}.getPartialLoadWithParentWhere${linkedTableClass}Query(
		      ${tableVariableName}.get${linkedTableClass}${localColumnClass}(), 
			  isWhereSet, aliasHt, aliasWhereHt, alias, "${localColumnVariable}");
		  query.append(chunck);
	   }
#end
	   return query.toString(); 
    }
	
	public static String reconciliateWherePath(Hashtable aliasWhatHt, Hashtable aliasWhereHt) {
	   StringBuffer sb = new StringBuffer();
	   boolean isBlankSet = false;
	   aliasWhatHt.putAll(aliasWhereHt);
	   Enumeration<String> elements = aliasWhatHt.elements();
	   while (elements.hasMoreElements()) {
		  String element = elements.nextElement();
		  if (!element.equals("")) {
		     sb.append (getQueryBLANK_AND (isBlankSet));
		     isBlankSet=true;
		     sb.append(element);
		  }
	   }
	   return sb.toString();
	}
	
	public static String reconciliateHowPath(Hashtable aliasWhatHt, Hashtable aliasWhereHt) {
	   StringBuffer sb = new StringBuffer();
	   boolean isBlankSet = false;
	   aliasWhatHt.putAll(aliasWhereHt);
	   Enumeration<String> keys = aliasWhatHt.keys();
	   while (keys.hasMoreElements()) {
		  String key = keys.nextElement();
		  sb.append (getQueryBLANK_COMMA (isBlankSet));
		  isBlankSet = true;
		  sb.append(getAliasKeyDomain(key)+" "+getAliasKeyAlias(key));
	   }
	   return sb.toString();
	}
	
	protected static String getRootDomainName (String domainName) {
		return StringUtils.substringBefore(domainName, "_");
	}
	
    public static String getPartialLoadWithParent${tableClassName}Query (
	   $tableClassName $tableVariableName, Boolean isWhereSet, Hashtable aliasHt, String childAlias, String childFKAlias, Map beanPath, String rootPath) {
	   String alias = null;
	   if (aliasHt == null) {
	      aliasHt = new Hashtable();
	   } 
	   if (isLookedUp($tableVariableName)){
	      alias = getNextAlias (aliasHt, ${tableVariableName});
		  aliasHt.put (getAliasKey(alias), getAliasConnection(alias, childAlias, childFKAlias));
	   }
	   if (isWhereSet == null)
          isWhereSet = false;
       StringBuffer query = new StringBuffer();
#foreach ($column in ${table.columns})
#putColumnParams()
       if (${tableVariableName}.get$columnClass() != null) {
          query.append (getQuerySelectComma (isWhereSet));
          isWhereSet = true; 
          beanPath.put(beanPath.size(), rootPath+"${columnVar}");
          query.append(" "+alias+".${columnVar} ");
       }
#end     
#foreach ($reference in $table.parents)
#putReferenceParams2()
#set ($importDaoImplExtendedHibernateName = $commonUtils.getEntityLevelTemplateFullPath($model, $reference.foreignTable, $template, "BslaHibernateExtendedDaoImplUML"))
#set ($linkedDaoImplExtendedHibernateName = $commonUtils.getTemplateClassName($model, $reference.foreignTable, $template, "BslaHibernateExtendedDaoImplUML"))
##-- var : $localColumnVariable ; class = ${localColumnClass} 
       if (${tableVariableName}.get${linkedTableClass}${localColumnClass}()!=null) {
	      String chunck = ${importDaoImplExtendedHibernateName}.getPartialLoadWithParent${linkedTableClass}Query(
		      ${tableVariableName}.get${linkedTableClass}${localColumnClass}(), 
			  isWhereSet, aliasHt, alias, "${localColumnVariable}", beanPath, rootPath+"${linkedTableVariable}${localColumnClass}.");
		  query.append(chunck);
	   }  
#end
//       query.append(get${tableClassName}SearchEqualQuery (positive$tableClassName, negative$tableClassName));
	   return query.toString(); 
    }
	
	protected static String getAliasConnection(String existingAlias, String childAlias, String childFKAlias) {
		if (childAlias==null)
		   return "";
		return childAlias+"."+childFKAlias+" = "+existingAlias+"."+"$primaryKeyVariable";
	}
	
	protected static String getAliasKey (String alias) {
	  //TODO this is a temporary solution use a dedicated object in BslaHiberateDaoSupport
		return "${tableClassName}|"+alias;
	}
	
	protected static String getAliasKeyAlias (String aliasKey) {
	  //TODO this is a temporary solution use a dedicated object in BslaHiberateDaoSupport
		return StringUtils.substringAfter(aliasKey, "|");
	}
	
	protected static String getAliasKeyDomain (String aliasKey) {
	  //TODO this is a temporary solution use a dedicated object in BslaHiberateDaoSupport
	  return StringUtils.substringBefore(aliasKey, "|");
	}
	
	protected static String getNextAlias (Hashtable aliasHt, $tableClassName $tableVariableName) {
		int cptSameAlias = 0;
		Enumeration<String> keys = aliasHt.keys();
		while (keys.hasMoreElements()) {
			String key = keys.nextElement();
			if (key.startsWith("$tableVariableName"))
				cptSameAlias++;
		}
		if (cptSameAlias==0)
			return "$tableVariableName";
		else
			return "${tableVariableName}_"+cptSameAlias;
	}
	
	
	protected static boolean isLookedUp ($tableClassName $tableVariableName) {
	   if ($tableVariableName==null)
		  return false;
#foreach ($column in ${table.columns})
#putColumnParams()
       if (${tableVariableName}.get$columnClass() != null) {
	      return true;
       }
#end    
#foreach ($reference in $table.parents)
#putReferenceParams2()
       if (${tableVariableName}.get${linkedTableClass}${localColumnClass}()!=null) {
	      return true;
	   }  
#end	
       return false;   
	}
	
    public String getPartialLoad${tableClassName}Query(
	   $tableClassName $tableVariableName, 
	   $tableClassName positive$tableClassName, 
	   $tableClassName negative$tableClassName) {
       boolean isWhereSet = false;
       StringBuffer query = new StringBuffer();
#foreach ($column in ${table.columns})
#putColumnParams()
       if (${tableVariableName}.get$columnClass() != null) {
          query.append (getQuerySelectComma (isWhereSet));
          isWhereSet = true; 
          query.append(" ${columnVar} ");
       }
#end    
       query.append(get${tableClassName}SearchEqualQuery (positive$tableClassName, negative$tableClassName));
	   return query.toString(); 
    }
	
	public List<$tableClassName> searchPrototypeWithCache$tableClassName($tableClassName $tableVariableName) {
		SimpleCache simpleCache = new SimpleCache();
		List<$tableClassName> list = (List<$tableClassName>)simpleCache.get(${tableVariableName}.toString());
		if (list==null) {
			list = searchPrototype$tableClassName($tableVariableName);
			simpleCache.put(${tableVariableName}.toString(), list);
		}
		return list;
	}
    
    protected static String getQuerySelectComma (boolean isSelectSet) {
       if (isSelectSet)
          return " , ";
       return " select ";
    }	
	    
    protected static String getQueryBLANK_AND (boolean isBlankSet) {
       if (isBlankSet)
          return " AND ";
       return " ";
    }
	
	protected static String getQueryBLANK_COMMA (boolean isBlankSet) {
       if (isBlankSet)
          return " , ";
       return " ";
    }
}
