#set ($table = $scope.modelEntity)
#exposeVariableEntitySpecific()
#exposeServiceParam()
##distinctEntityProperty()
##putImportParams()
##exposeVariableEntitySpecificBslaDaoIbatis()
#exposeArchitectureParams()
package $packageName;

#distinctEntityProperty()
import $importDomainObject;
import $importDaoInterface;
import $importServiceInterface;
import java.util.List;


/**
 *
 * <p>Title: $className</p>
 *
 * <p>Description: Interface of a Service dealing with $className
 * </p>
 *
 */
public class $className implements $serviceInterfaceName {
    
    $daoInterfaceClassName $daoInterfaceVariableName;    
    
#foreach($strategy in $scope.strategies)
#set ($methodName = $serviceView.getStrategyMethod($strategy))
#set ($methodInputParameters = $serviceView.getStrategyInputParam($strategy))
#set ($methodOutputParameters = $serviceView.getStrategyOutputParam($strategy))
#set ($view = $serviceView.getView($strategy))
##set ($table = $view)
#exposeVariableEntitySpecific()
#if ($strategy.name == 'SearchEntityOnLogicalIdBasedOnVirtualPrimaryKey')      

    public $tableClassName $methodName (
#foreach ($column in $view.virtualPrimaryKeys) 
#putColumnParams()
       $columnType $columnVar#if ($velocityCount!=$primaryKeyCount),#end
#end    
       ) {
       $tableClassName $tableVariableName = new $tableClassName ();
#foreach($column in $view.virtualPrimaryKeys)
#putColumnParams()
       ${tableVariableName}.set$columnClass ($columnVar);
#end  
       List <${tableClassName}> list = ${daoInterfaceVariableName}.search$tableClassName(${tableVariableName});
       if (!list.isEmpty()) 
          return list.get(0);
       return new $tableClassName ();

    }
#end
#if ($strategy.name == 'SearchEntityOnLogicalId')      
#set ($strategyColumnCount = $serviceView.getCountStrategyLogicalIdColumns($strategy))
    
    public $tableClassName $methodName (
#foreach ($column in $serviceView.getStrategyLogicalIdColumns($strategy)) 
#putColumnParams()
       $columnType $columnVar#if ($velocityCount!=$strategyColumnCount),#end
#end    
       ) {
       $tableClassName $tableVariableName = new $tableClassName ();
#foreach ($column in $serviceView.getStrategyLogicalIdColumns($strategy))
#putColumnParams()
       ${tableVariableName}.set$columnClass ($columnVar);
#end  
       List <${tableClassName}> list = ${daoInterfaceVariableName}.search$tableClassName(${tableVariableName});
       if (!list.isEmpty()) 
          return list.get(0);
       return new $tableClassName ();

    }
#end
#if ($strategy.name == 'SearchListBasedOnPrototype')      
    
    public List <${tableClassName}> $methodName (${tableClassName} $tableVariableName) {
       return ${daoInterfaceVariableName}.search$tableClassName(${tableVariableName});
    }
#end
#if ($strategy.name == 'SearchListBasedOnPrototypeInfo')      
    
    public List <${tableClassName}> $methodName (
#foreach ($column in $serviceView.getStrategyLogicalIdColumns($strategy)) 
#putColumnParams()
       $columnType $columnVar#if ($velocityCount!=$strategyColumnCount),#end
#end    
    ) {
       $tableClassName $tableVariableName = new $tableClassName ();
#foreach($column in $serviceView.getStrategyLogicalIdColumns($strategy))
#putColumnParams()
       ${tableVariableName}.set$columnClass ($columnVar);
#end      
       return ${daoInterfaceVariableName}.search$tableClassName(${tableVariableName});
    }
#end
#end

    public void set$daoInterfaceClassName ($daoInterfaceClassName $daoInterfaceVariableName) {
       this.$daoInterfaceVariableName = $daoInterfaceVariableName;
    }
    
    public $daoInterfaceClassName get$daoInterfaceClassName () {
       return $daoInterfaceVariableName;
    }    
    
}
