#exposeJOOQEntitySpecific()
#addedAreas()
/**
 * This class is generated by minuteproject 4 jOOQ
 */
package $packageName;

import $recordClassImport;
import $modelClassImport;
import $keysClassImport;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.ForeignKey;
import java.util.List;
import java.util.Arrays;

#putClassImportSnippet()
public class $className extends $entitySuperClass <$recordClass> {

	private static final long serialVersionUID = $serialValue;

	/**
	 * The singleton instance of $className
	 */
##	public static final my.jooq.mp.tables.Address ADDRESS = new my.jooq.mp.tables.Address();
	public static final $className $classNameUpperCase = new $className();

	/**
	 * The class holding records for this type
	 */
##	private static final java.lang.Class<my.jooq.mp.tables.records.AddressRecord> __RECORD_TYPE = my.jooq.mp.tables.records.AddressRecord.class;
	private static final Class<$recordClass> __RECORD_TYPE = ${recordClass}.class;

	/**
	 * The class holding records for this type
	 */
	@Override
##	public java.lang.Class<my.jooq.mp.tables.records.AddressRecord> getRecordType() {
	public Class<${recordClass}> getRecordType() {
		return __RECORD_TYPE;
	}

#if(!$isPkUserProvided && ${table.primaryKeyColumns.size}>1)
    @Override
    public org.jooq.Identity<$recordClass, $primaryKeyFullType> getIdentity() { //$primaryKeyFirstColumn.type
        return ${keysClass}.IDENTITY_$classNameLowerCase; // $columnUtils.isNaturalPk($primaryKeyFirstColumn)
    }

#end

#foreach($column in ${table.primaryKeyColumns})
#putJOOQColumnParam()
#if(!$columnUtils.isForeignKey($column))

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY $column.name
	 */
	public final TableField<${recordClass}, $jooqColumnFullType> $columnVariableUpperCase = createField("${column.name}", $jooqFullType, this);
#end
#end

#foreach ($column in ${table.attributes})
#putJOOQColumnParam()
	/**
	 * $columnVariableUpperCase mapping for $column.name
	 */
#if($isEnum)
#exposeJOOQEnum()
    public final TableField<$recordClass, $jooqColumnFullType> $columnVariableUpperCase = createField("${column.name}", ${jooqFullType}.asEnumDataType(${jooqColumnFullType}.class), this);
#else
	public final TableField<$recordClass, $jooqColumnFullType> $columnVariableUpperCase = createField("${column.name}", $jooqFullType, this);
#end
#end

#foreach ($reference in $table.parents)
#putJOOQReferenceParam()	
	/**
#if ($reference.localColumn.isPrimaryKey())
     * PRIMARY KEY
#end
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [${localTableVariable}.${localColumnVariable}]
	 * REFERENCES ${linkedTableVariable} [${linkedTableVariable}.${linkedColumnVariable}]
	 * </pre></code>
	 */
	public final TableField<$recordClass, $columnFullType> $columnVariableUpperCase = createField("$reference.localColumn.name", $jooqFullType, this);

#end

	/**
	 * No further instances allowed
	 */
	private $className() {
		super("$table.name", ${modelClass}.$modelNameUpperCase);
	}

	/**
	 * No further instances allowed
	 */
	private $className(String alias) {
		super(alias, ${modelClass}.$modelNameUpperCase, ${className}.$classNameUpperCase);
	}

#if($table.hasPrimaryKey())
	@Override
	public org.jooq.UniqueKey<$recordClass> getMainKey() {
		return ${keysClass}.KEY_${classNameLowerCase}_PRIMARY;
	}

	@Override
	@SuppressWarnings("unchecked")
	public java.util.List<UniqueKey<$recordClass>> getKeys() {
		return java.util.Arrays.<UniqueKey<$recordClass>>asList(${keysClass}.KEY_${classNameLowerCase}_PRIMARY);
	}

#end
#foreach($table in $entities)
#exposeJOOQEntitySpecific()
#foreach($reference in $table.parents)
#putJOOQReferenceParam()
	@Override
	@SuppressWarnings("unchecked")
	public java.util.List<ForeignKey<$recordClass, ?>> getReferences() {
		return java.util.Arrays.<ForeignKey<$recordClass, ?>>asList(${keysClass}.fk_${classNameLowerCase}_${columnVariableUpperCase}1);
	}
#end
#end
	@Override
	public $className as(java.lang.String alias) {
		return new $className(alias);
	}
	
$!updatedAreaImplementation	

}
