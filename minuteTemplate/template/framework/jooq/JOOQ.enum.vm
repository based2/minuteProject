#exposeColumnSpecific()
#addedAreas()
/**
 * This class is generated by minuteproject 4 jOOQ
 */
package $packageName;

import java.util.ArrayList;
import java.util.List;

#putClassImportSnippet()
public enum $className implements org.jooq.EnumType {

#if($columnUtils.hasCheckConstraint($column))
#set($property=$columnUtils.getCheckConstraintProperty($column))
#set($propertyList=$property.getPropertiesArray())
#foreach ($prop in $propertyList)
#exposeEnumerationSpecific()
    $enumName("$enumValue")#if( $velocityHasNext ),
#end
#end
#end
;

    private final String literal;

    private $className(String literal) {
        this.literal = literal;
    }

    @Override
    public String getName() {
        return "${column.table.name}_$column.name";
    }

    @Override
    public String getLiteral() {
        return literal;
    }

    public static ${className} fromValue(String v) {
        for (${className} c : ${className}.values()) {
            if (c.literal.equals(v)) {
                return c;
            }
        }
        return null; //no IllegalArgEx thrown there, null returned on purpose.
    }

    /**
    * Return a list that contains all the enumeration values      
    * @return List<$className> the that contains all the enumeration values  
    */     
    public static List<$className> getList() {
        List<$className> list = new ArrayList<$className>();
        for ($className c : ${className}.values()) {
           list.add(c);
        }
        return list;
    }

    /**
    * @param value 
    * @return boolean : true if the value exist in the enum
    */
    public static boolean contains (String value) {
       for ($className c : ${className}.values()) {
          if (c.toString().equals(value))
             return true;
          }      
       return false;
    }     

    public static boolean containsValue (String value) {
        for ($className c : ${className}.values()) {
           if (c.literal.equals(value))
              return true;
           }         
        return false;
    }

    public boolean equals (String s) {
        if (s==null) return false;
        return s.equals(literal);
    }            

$!updatedAreaImplementation

}
