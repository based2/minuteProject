#exposeJOOQEntitySpecific()
#exposeJOOQCommon()
#set($returnType=$jooqUtils.getReturnType($function))
#set($jooqReturnFullType=$jooqUtils.getReturnFullType($function))
#set($jooqDialect=$jooqUtils.getDialect($database))
#set($jooqModelConstant=$jooqUtils.getModelConstant($template, $model))
#set($jooqModelConstant="${modelClassImport}.$modelUpperCase")
/**
 * This class is generated by jOOQ
 */
package $packageName;

import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
#putClassImportSnippet()
public class $className extends AbstractRoutine<$returnType> {

	private static final long serialVersionUID = $serialValue;

#if($function.hasReturn())
    /**
     * An uncommented item
     */
    public static final Parameter<$returnType> RETURN_VALUE = createParameter("RETURN_VALUE", $jooqReturnFullType);

#end
#foreach($functionColumn in ${function.columns})
#if(!$functionColumn.isReturn())
#set($column=$routineUtils.getColumn($functionColumn))
#putJOOQColumnParam()
    /**
     * An uncommented item
     */
    public static final Parameter<$jooqColumnFullType> $columnVariableUpperCase = createParameter("$column.name", $jooqFullType); //$jooqFullType

#end
#end

    /**
     * Create a new routine call instance
     */
    public $className() {
#if($function.hasReturn())
        super($jooqDialect, "$table.name", $jooqModelConstant, $jooqReturnFullType);
#else
		super($jooqDialect, "$table.name", $jooqModelConstant);
#end
#if($function.hasReturn())
        setReturnParameter(RETURN_VALUE);
#end
#foreach($column in ${function.columns})
#if(!$column.isReturn())
#putJOOQColumnParam()
        addInParameter($columnVariableUpperCase);
#end
#end
    }

#foreach($column in ${table.columns})
#if(!$routineUtils.isReturn($function, $column))
#putJOOQColumnParam()
    /**
     * Set the <code>$column.name</code> parameter to the routine
     */
    public void set$columnClass($jooqColumnFullType value) {
        setValue($columnVariableUpperCase, value);
    }

    /**
     * Set the <code>$column.name</code> parameter to the function
     * <p>
     * Use this method only, if the function is called as a {@link org.jooq.Field} in a {@link org.jooq.Select} statement!
     */
    public void set$columnClass(Field<$jooqColumnFullType> field) {
        setField($columnVariableUpperCase, field);
    }
    
#end
#end

}
