#exposeJOOQEntitySpecific()
#addedAreas()
/**
 * This class is generated by minuteproject 4 jOOQ
 */
package $packageName;

import org.jooq.impl.UpdatableRecordImpl;

import $entityClassImport;
import $modelClassImport;
import $keysClassImport;
import java.sql.*;

#putClassImportSnippet()
public class $className extends UpdatableRecordImpl<$recordClassImport> {

	private static final long serialVersionUID = $serialValue;

#foreach($column in ${table.primaryKeyColumns})
#if(!$columnUtils.isForeignKey($column))
#putJOOQColumnParam()
#exposeModelUpdatedAreas("jooq-record-pk")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
##	public void set$primaryKeyJavaNameClass(${primaryKeyFullType} value) {
##		setValue($classPkConstant, value);
##	}
    public void set$columnClass($jooqColumnFullType value) {
        setValue($classFieldConstant, value);
    }
	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
##	public ${primaryKeyFullType} get$primaryKeyJavaNameClass() {
##		return getValue($classPkConstant);
##	}
    public $jooqColumnFullType get$columnClass() {
        return getValue($classFieldConstant);
    }
#end
$!updatedAreaEnd
#end
#end
#foreach ($reference in $table.children)
#putJOOQReferenceParamChildren()
#exposeModelUpdatedAreas("jooq-record-child-$childrenListClass")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
	/**
	 * An uncommented item
	 * 
	 */
	public java.util.List<$linkedRecordClassImport> fetch${childrenListClass}List() {
		return create()
			.selectFrom($linkedClassConstant)
			.where(${linkedClassFieldConstant}.equal(getValue($classPkConstant))) 
			.fetch();
	}
	
#end
$!updatedAreaEnd
#end
//many2many
##foreach ($linkReference in $enrichmentUtils.getLinkedTargetReferenceByMany2Many($table))
##exposeJOOQM2MSpecific()
##exposeModelUpdatedAreas("jooq-record-child-$childrenListClass")
##$!updatedAreaBegin
##if($isUpdated)
##$!updatedAreaSnippet
##else

##    @ManyToMany
##    @JoinTable(name="$linkedTableDBName", 
##        joinColumns=@JoinColumn(name="$targetColumn.name"), 
##        inverseJoinColumns=@JoinColumn(name="$linkReference.localColumnName") 
##    )
##	
##	/**
##	 * An uncommented item
##	 * $linkedRecordClassImport
##	 */
##	public java.util.List<$foreignRecordClassImport> fetch${childrenListClass}List() {
##		return create()
##			.selectFrom($linkedClassConstant)
##			.selectFrom($foreignEntityClassConstant)
##			.join(${linkedClassConstant})
##			.where(${linkedForeignClassFieldConstant}.equal(getValue($classPkConstant)))
##			.and(${linkedLocalClassFieldConstant}.equal(getValue($classPkConstant)))
##			.fetch();
##	}
##	
###end
##$!updatedAreaEnd
###end
##//many2many end
#foreach ($column in $table.attributes)
#putJOOQColumnParam()
#if($isEnum)
#exposeJOOQEnum()
#end
#exposeJOOQRecordNaming()
#exposeModelUpdatedAreas("jooq-record-attribute-$classFieldConstant")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
	/**
	 * mapping $column.name setter
	 */
	public void set$columnClass($jooqColumnFullType value) {
		setValue($classFieldConstant, value);
	}
	
	/**
	 * mapping $column.name getter
	 */
	public $jooqColumnFullType get$columnClass() {
		return getValue($classFieldConstant);
	}
	
#end
$!updatedAreaEnd
#end

#foreach ($reference in $table.parents)
#putJOOQReferenceParam()
#exposeModelUpdatedAreas("jooq-record-parent-$classFieldConstant")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
	/**
#if ($reference.localColumn.isPrimaryKey())
     * PRIMARY KEY
#end
	 * setter and mapper in for $localColumnVariable
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [${localTableVariable}.${localColumnVariable}]
	 * REFERENCES ${linkedTableVariable} [${linkedTableVariable}.${linkedColumnVariable}]
	 * </pre></code>
	 */
	public void set$localColumnClass($jooqColumnFullType value) {
		setValue($classFieldConstant, value);
	}
	

	/**
	 * getter and mapper out for $localColumnVariable
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [${localTableVariable}.${localColumnVariable}]
	 * REFERENCES ${linkedTableVariable} [${linkedTableVariable}.${linkedColumnVariable}]
	 * </pre></code>
	 */
	public $columnFullType get$localColumnClass() {
		return getValue($classFieldConstant);
	}
	

	/**
	 * fetcher of associated $linkedTableVariable via $localColumnClass
	 * <p>
	 * <code><pre>
     * FOREIGN KEY [${localTableVariable}.${localColumnVariable}]
     * REFERENCES ${linkedTableVariable} [${linkedTableVariable}.${linkedColumnVariable}]
	 * </pre></code>
	 */
	public $linkedRecordClassImport fetch$localColumnClass() {
		return create()
			.selectFrom($linkedClassConstant)
			.where(${linkedClassFieldConstant}.equal(getValue($classFieldConstant))) //$linkedColumn.alias
			.fetchOne();
    }
#end
$!updatedAreaEnd
#end
	/**
	 * Create a detached $className
	 */
	public $className() {
		super($classConstant);
	}

$!updatedAreaImplementation

}
