#exposeCompositeSpecific()
#exposeSDDCompositeSpring()
#set($thisClassName=$className)
#putImportCompositeSDDBean()
#exposeRESTSDDCompositeURLServer()
#addedAreas()
package $packageName;

$!updatedAreaImport
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.io.*;
import java.sql.*;

import javax.servlet.http.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.FormParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import javax.xml.bind.JAXBElement;

import $sddInputCompositeBeanImport;
import $sddOutputCompositeBeanImport;
import $sddCompositeDaoInterfaceImport;

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: remote interface for ${className} service </p>
 *
 */
#if($isFormatJson)
@Produces ({MediaType.APPLICATION_JSON})
@Consumes ({MediaType.APPLICATION_JSON})
#elseif($isFormatXml)
@Produces ({MediaType.APPLICATION_XML})
@Consumes ({MediaType.APPLICATION_XML})
#end
@Service ("${classVariableName}")
@Transactional
#if($isFormatJson)
@Path ("$restJsonServerUrl")
#elseif($isFormatXml)
@Path ("$restXmlServerUrl")
#end
public class ${className} {

    @Autowired
    @Qualifier("$sddCompositeDaoInterfaceVariable")
    ${sddCompositeDaoInterfaceClass} $sddCompositeDaoInterfaceVariable;

#exposeQueryUpdatedAreas("SDD_EXECUTE_GET_FULL")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    @GET
#if($isFormatJson)
    @Produces (MediaType.APPLICATION_JSON) 
#elseif($isFormatXml)
    @Produces (MediaType.APPLICATION_XML) 
#end
    public $sddOutputCompositeBeanClass executeAndFormat (
#set($columns=$queryUtils.getInputCompositeFull($composite))
#foreach ($column in $columns)
#putColumnParamNaming()
#set($var = "$formatUtils.getJavaNameVariable($column.table.name)$columnClass")
    @QueryParam ("$var") $columnType $var#if ($velocityCount!=$columns.size()),
#end
#end
    ) {
        return execute(
#set($columns=$queryUtils.getInputCompositeFull($composite))
#foreach ($column in $columns)
#putColumnParamNaming()
#set($var = "$formatUtils.getJavaNameVariable($column.table.name)$columnClass")
           $var#if ($velocityCount!=$columns.size()),
#end
#end
		);
    }
#end

#exposeQueryUpdatedAreas("SDD_EXECUTE_GET_DISTINCT")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    @GET
#if($isFormatJson)
    @Produces (MediaType.APPLICATION_JSON) 
#elseif($isFormatXml)
    @Produces (MediaType.APPLICATION_XML) 
#end
    @Path ("/distinct")
    public $sddOutputCompositeBeanClass executeAndFormat (
#set($map=$queryUtils.getInputCompositeDistinct($composite))
#foreach ($listOfColumn in $map.values())
#set($column = $listOfColumn.get(0))
#putColumnParamNaming()
        $columnType $columnVar#if ($velocityCount!=$map.size()),
#end
#end
    ) {
	    $sddInputCompositeBeanClass $sddInputCompositeBeanVariable
		    = new $sddInputCompositeBeanClass(
#set($map=$queryUtils.getInputCompositeDistinct($composite))
#foreach ($listOfColumn in $map.values())
#set($column = $listOfColumn.get(0))
#putColumnParamNaming()
               $columnVar#if ($velocityCount!=$map.size()),
#end
#end		
		);
        return execute($sddInputCompositeBeanVariable);
    }
#end
$!updatedAreaEnd

#exposeQueryUpdatedAreas("SDD_EXECUTE_GET")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    public $sddOutputCompositeBeanClass execute (
#set($columns=$queryUtils.getInputCompositeFull($composite))
#foreach ($column in $columns)
#putColumnParamNaming()
#set($var = "$formatUtils.getJavaNameVariable($column.table.name)$columnClass")
        $columnType $var#if ($velocityCount!=$columns.size()),
#end
#end
) {
		$sddInputCompositeBeanClass $sddInputCompositeBeanVariable 
           = new $sddInputCompositeBeanClass (
#set($columns=$queryUtils.getInputCompositeFull($composite))
#foreach ($column in $columns)
#putColumnParamNaming()
#set($var = "$formatUtils.getJavaNameVariable($column.table.name)$columnClass")
           $var#if ($velocityCount!=$columns.size()),
#end
#end
        );
        return ${sddCompositeDaoInterfaceVariable}.execute(${sddInputCompositeBeanVariable});
    }
#end
$!updatedAreaEnd

#exposeQueryUpdatedAreas("SDD_EXECUTE_GET_BACKEND")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    public $sddOutputCompositeBeanClass execute ($sddInputCompositeBeanClass $sddInputCompositeBeanVariable) {
        return ${sddCompositeDaoInterfaceVariable}.execute(${sddInputCompositeBeanVariable});
    }
#end
$!updatedAreaEnd

$!updatedAreaImplementation

}