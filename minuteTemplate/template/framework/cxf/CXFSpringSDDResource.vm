#exposeQuerySpecific()
#exposeSDDSpring()
#exposeRESTSDDURLServer()
#putImportQuerySDDBean()
#addedAreas()
package $packageName;

$!updatedAreaImport
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.io.*;
import java.sql.*;

import javax.servlet.http.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.FormParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import javax.xml.bind.JAXBElement;

import $sddOutputBeanCollectionImport;
import $sddInputBeanImport;
import $sddDaoInterfaceImport;
/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: remote interface for ${className} service </p>
 *
 */
#if($isFormatJson)
@Produces ({MediaType.APPLICATION_JSON})
@Consumes ({MediaType.APPLICATION_JSON})
#elseif($isFormatXml)
@Produces ({MediaType.APPLICATION_XML})
@Consumes ({MediaType.APPLICATION_XML})
#end
@Service ("${classVariableName}")
@Transactional
#if($isFormatJson)
@Path ("$restJsonServerUrl")
#elseif($isFormatXml)
@Path ("$restXmlServerUrl")
#end
public class ${className} {

    @Autowired
    @Qualifier("$sddDaoInterfaceVariable")
    ${sddDaoInterfaceClass} $sddDaoInterfaceVariable;

#exposeQueryUpdatedAreas("SDD_EXECUTE_GET")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    @GET
#if($isFormatJson)
    @Produces (MediaType.APPLICATION_JSON) 
#elseif($isFormatXml)
    @Produces (MediaType.APPLICATION_XML) 
#end

    public $sddOutputBeanCollectionClass executeAndFormat (
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
        @QueryParam ("$columnVar") $columnType $columnVar #if($velocityCount!=$inputBean.columnCount),
#end
#end
) {
        return execute(
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
           $columnVar #if($velocityCount!=$inputBean.columnCount),
#end
#end
		
		);
    }
#end
$!updatedAreaEnd

#exposeQueryUpdatedAreas("SDD_EXECUTE_GET")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    public $sddOutputBeanCollectionClass execute (
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
        $columnType $columnVar #if($velocityCount!=$inputBean.columnCount),
#end
#end
) {
		$sddInputBeanClass $sddInputBeanVariable = new $sddInputBeanClass ();
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
		${sddInputBeanVariable}.set$columnClass ($columnVar);
#end
        return ${sddDaoInterfaceVariable}.execute(${sddInputBeanVariable});
    }
#end
$!updatedAreaEnd

$!updatedAreaImplementation

}