#exposeStatementIOSpecific()
#exposeRESTSDDURLServer()
#addedAreas()
package $packageName;

$!updatedAreaImport
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.io.*;
import java.sql.*;

import javax.servlet.http.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.FormParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import javax.xml.bind.JAXBElement;

import $inputObjectImport;
import $outputObjectImport;
import $SDDDaoInterfaceImport;

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: class for ${className} service </p>
 *
 */
@Path ("$restXmlServerUrl")
@Produces ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
@Consumes ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
@Service
@Transactional
public class ${className} <I, O, D extends $GenericSDDDao> {
 
#exposeEntityUpdatedAreas("SDD_EXECUTE")
$!updatedAreaBegin
#if($isUpdated)
$!updatedAreaSnippet
#else
    @GET
    @Produces ({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON}) 
    public List<O> execute () {
        return getDao().execute(getInput());
    }
#end
$!updatedAreaEnd

    public abstract D getDao();
    public abstract I getInput();
    
$!updatedAreaImplementation
}